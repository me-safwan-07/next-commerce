generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum OrderStatusEnum {
  Processing
  Shipped
  Delivered
  ReturnProcessing
  ReturnCompleted
  Cancelled
  RefundProcessing
  RefundCompleted
  Denied
}

enum PaymentStatusEnum {
  Processing
  Paid
  Failed
  Denied
}

model User {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  email                    String   @unique
  phone                    String?
  name                     String?
  birthday                 String?
  OTP                      String?
  emailUnsubscribeToken    String   @unique @default(cuid())
  referralCode             String?
  isBanned                 Boolean  @default(false)
  isEmailVerified          Boolean  @default(false)
  isPhoneVerified          Boolean  @default(false)
  isEmailSubscribed        Boolean  @default(false)
  isPhoneSubscribed        Boolean  @default(false)
  cart                     Cart?
  wishlistItems            Wishlist[]
  orders                   Order[]
  addresses                Address[]
  payments                 Payment[]
  notifications            Notification[]
  productReviews           ProductReview[]
  errors                   Error[]
  files                    File[]
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model Wishlist {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  productId  String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  @@unique([userId, productId], name: "UniqueWishlist")
}

model CategoryProduct {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String   @db.ObjectId
  productId   String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  @@unique([categoryId, productId], name: "UniqueCategoryProduct")
}

model BannerCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bannerId    String   @db.ObjectId
  categoryId  String   @db.ObjectId
  banner      Banner   @relation(fields: [bannerId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  @@unique([bannerId, categoryId], name: "UniqueBannerCategory")
}

model Cart {
  user     User       @relation(fields: [userId], references: [id])
  userId   String     @id @map("_id") @db.ObjectId
  items    CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId     String   @db.ObjectId
  productId  String   @db.ObjectId
  count      Int
  cart       Cart     @relation(fields: [cartId], references: [userId])
  product    Product  @relation(fields: [productId], references: [id])
  @@unique([cartId, productId], name: "UniqueCartItem")
}

model Owner {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  phone    String?
  name     String?
  avatar   String?
  OTP      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  phone    String?
  name     String?
  avatar   String?
  OTP      String?
  blogs    Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  description String?
  logo        String?
  products    Product[]
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  images         String[]
  keywords       String[]
  metadata       Json?
  price          Float    @default(100)
  discount       Float    @default(0)
  stock          Int      @default(0)
  isPhysical     Boolean  @default(true)
  isAvailable    Boolean  @default(false)
  isFeatured     Boolean  @default(false)
  orders         OrderItem[]
  cartItems      CartItem[]
  wishlistItems  Wishlist[]
  productReviews ProductReview[]
  brand          Brand    @relation(fields: [brandId], references: [id])
  brandId        String   @db.ObjectId
  categoryLinks  CategoryProduct[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@index([brandId])
}

model Category {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  title          String            @unique
  description    String?
  productLinks   CategoryProduct[]
  bannerLinks    BannerCategory[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Banner {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  label          String
  image          String
  categoryLinks  BannerCategory[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ProductReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  rating    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([productId, userId], name: "UniqueProductProductReview")
  @@index([userId])
  @@index([productId])
}
model Order {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  number         Int      @unique
  status         OrderStatusEnum
  total          Float    @default(100)
  shipping       Float    @default(100)
  payable        Float    @default(100)
  tax            Float    @default(100)
  discount       Float    @default(0)
  isPaid         Boolean  @default(false)
  isCompleted    Boolean  @default(false)
  payments       Payment[]
  orderItems     OrderItem[]
  refund         Refund?
  discountCode   DiscountCode? @relation(fields: [discountCodeId], references: [id])
  discountCodeId String?  @db.ObjectId
  address        Address?      @relation(fields: [addressId], references: [id])
  addressId      String?  @db.ObjectId
  user           User          @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@index([userId])
  @@index([addressId])
  @@index([discountCodeId])
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  productId  String   @db.ObjectId
  count      Int
  price      Float
  discount   Float
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  @@unique([orderId, productId], name: "UniqueOrderItem")
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  country    String   @default("IRI")
  address    String
  city       String
  phone      String
  postalCode String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]
  createdAt  DateTime @default(now())
  @@index([userId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isRead    Boolean  @default(false)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

model DiscountCode {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  code              String   @unique
  stock             Int      @default(1)
  description       String?
  percent           Int
  maxDiscountAmount Float    @default(1)
  startDate         DateTime
  endDate           DateTime
  order             Order[]
  createdAt         DateTime @default(now())
}

model Refund {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  reason    String
  orderId   String   @unique @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment { 
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  number     Int             @unique
  status     PaymentStatusEnum
  refId      String          @unique
  cardPan    String?
  cardHash   String?
  fee        Float?
  isSuccessful Boolean       @default(false)
  payable      Float
  providerId   String        @db.ObjectId
  provider     PaymentProvider @relation(fields: [providerId], references: [id])
  userId       String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id])
  orderId      String        @db.ObjectId
  order        Order         @relation(fields: [orderId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@index([userId])
  @@index([providerId])
  @@index([orderId])
}

model PaymentProvider {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  websiteUrl  String?
  isActive    Boolean  @default(false)
  orders      Payment[]
}

model Error {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  error     String
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  @@index([userId])
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  @@index([userId])
}

model Blog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  slug        String
  title       String
  image       String
  description String
  content     String?  @db.String
  categories  String[]
  keywords    String[]
  authorId    String   @db.ObjectId
  author      Author   @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([authorId])
}

