generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum IdentityProvider {
  email
  google
}

enum Categorys {
  Electronics
  Fashion
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  email         String    @unique
  emailVerified             DateTime?        @map(name: "email_verified")
  password      String?
  role          Role      @default(CUSTOMER)
  identityProvider          IdentityProvider @default(email)
  accounts      Account[]
  address       String?
  phone         String?

  // Relations
  cartItems     CartItem[]
  orders        Order[]
  reviews       Review[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String?  @db.String
  refresh_token     String?  @db.String
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  description   String
  price         Float
  stock         Int
  imageUrls     String[] // Array of image URLs
  // category      Category? @relation(fields: [categoryId], references: [id])
  // categoryId    String?   @db.ObjectId
  category      String
  status        String
  // Relations
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
}

model Category {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  slug          String    @unique

  // Relations
  // products      Product[]
}

model CartItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String    @db.ObjectId
  quantity      Int       @default(1)

  @@index([userId])
  @@index([productId])
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @db.ObjectId
  totalAmount   Float
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  orderItems    OrderItem[]

  shippingAddress String
  phone           String
}

model OrderItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id])
  productId     String    @db.ObjectId
  quantity      Int
  price         Float     // Price at the time of purchase

  @@index([orderId])
  @@index([productId])
}

model Review {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id])
  productId     String    @db.ObjectId
  rating        Int       // 1-5 stars
  comment       String
  createdAt     DateTime  @default(now())

  @@index([userId])
  @@index([productId])
}
